<!--
  Copyright 2002,2004 The Apache Software Foundation.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
       http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->

<project default="jar" xmlns:j="jelly:core" xmlns:maven="jelly:maven" xmlns:util="jelly:util">

  
  <!-- TAG DOCUMENTATION -->
  <goal 
    name="tags:doc"
    description="Build the documentation for each tag library">

    <j:set var="maven.jellydoc.packages" value="org.apache.commons.jelly.*"/>
    
    <maven:reactor
      basedir="./"
      includes="project.xml"
      goals="jellydoc,xdoc"
      banner="Building tag"
      ignoreFailures="false"/>
  </goal>

  
  <!-- ===================================================================== -->
  <!-- GENERATE THE TAG-LIBRARY LIST                       -->
  <!-- ===================================================================== -->
  <preGoal name="xdoc:transform">
      
    <!-- can't pass anything into the jellydoc doclet so its hard coded to target -->      
    <mkdir dir="target"/>
          
    <mkdir dir="${maven.gen.docs}/libs/"/>
    <j:file name="${maven.gen.docs}/libs/index.xml"
      prettyPrint="true">
      <document>
        <properties>
          <title>Semantag Libraries</title>
          <author email="c_froehlich@users.sourceforge.net">Christoph Fr√∂hlich</author>
        </properties>
        <body>
          <section name="Jelly Libraries">
            <p>
              The following jelly tag libraries are available as part of the semantag distribution.
            </p>
            <ul>
              <fileScanner var="pluginProjects">
                <fileset dir="${basedir}">
                  <include name="project.xml" />
                </fileset>
             </fileScanner>
             <j:forEach items="${pluginProjects.iterator()}" var="plugin">
               <j:set var="pluginName" value="${plugin.parentFile.name}" />
               <li>
                 <a href="./${pluginName}/index.html">${pluginName}</a> :
                 <a href="./${pluginName}/tags.html">tags</a> 
               </li>
             </j:forEach>
            </ul>
          </section>
        </body>
      </document>
    </j:file>

    <!-- now lets implement the jellydoc for the core package -->    
    <j:set var="maven.jellydoc.packages" value="org.apache.commons.jelly.tags.core.*"/>
    <attainGoal name="jellydoc"/>
  </preGoal>

  <preGoal name="xdoc">

    <j:if test="${empty(mainSiteOnly)}">
      <!--        
      This runs out of memory - have a feeling its the velocity & xdoc plugin
      -->
      <!-- <maven:reactor
        basedir="${basedir}"
        includes="jelly-tags/*/project.xml"
        goals="site"
        banner="Generating site for"
        ignoreFailures="false"
      />-->
      <!-- PL: instead... invoke maven from the command-line directly for
       each directory in jelly-tags. -->
      <attainGoal name="tags:build-site-individually"/>
        
      <!-- then copy all the results to docs/libs -->
      <j:if test="${context.getVariable('maven.docs.dest') == null}">
        <j:set var="maven.docs.dest" value="target/docs"/>
      </j:if>
    
      <!-- create the parent directory for the docs -->
      <mkdir dir="${maven.docs.dest}/libs" />
    
      <!-- copy them all to ${maven.docs.dest}/libs/${plugin.id}/ -->
      <j:forEach items="${pluginProjects.iterator()}" var="plugin">
        <j:set var="pluginName" value="${plugin.parentFile.name}" />
        <mkdir dir="${maven.docs.dest}/libs/${pluginName}/" />
        <copy toDir="${maven.docs.dest}/libs/${pluginName}/">
          <fileset dir="target/docs/">
            <include name="**" />
          </fileset>
        </copy>
      </j:forEach>
    </j:if>
  </preGoal>

  <goal name="tags:build-site-individually">

    <fileScanner var="taglibProjects">
      <fileset dir="${basedir}">
        <include name="project.xml" />
      </fileset>
    </fileScanner>
            
    <j:choose>
      <j:when test="${systemScope['os.name'].startsWith('Windows')}">
        <j:set var="mavenCmd" value="${maven.home}/bin/maven.bat"/>
      </j:when>
      <j:otherwise>
        <j:set var="mavenCmd" value="${maven.home}/bin/maven"/>
      </j:otherwise>
    </j:choose>
        
    <j:forEach items="${taglibProjects.iterator()}" var="taglib">
      <j:set var="tlName" value="${taglib.parentFile.name}" />
      <echo>Processing tag-library ${tlName}.</echo>
      <j:set var="dir" value="${basedir}"/>
      <j:set var="testVar" value="siteIsBuilt${tlName}"/>
      <uptodate property="${testVar}">
        <srcfiles dir="${dir}" excludes="target/**/*"/>
        <mapper type="merge" to="${dir}/target/docs/index.html"/>
      </uptodate>
      <echo>Tag-library ${tlname}'s site is up-to-date ? "${context.getVariable(testVar)}"</echo>
      <j:if test="${!context.getVariable(testVar)}">
        <echo>Building tag-library ${tlname}'s site.</echo>

        <exec executable="${mavenCmd}" failonerror="true" dir="${dir}">
          <arg value="site"/>
        </exec>
      </j:if>
    </j:forEach>
        
  </goal>



</project>
